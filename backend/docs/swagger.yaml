definitions:
  book.BookOutput:
    properties:
      author:
        type: string
      id:
        type: integer
      tittle:
        type: string
      year:
        type: integer
    type: object
  book.BookOutputDetail:
    properties:
      author:
        type: string
      created_at:
        type: string
      id:
        type: integer
      tittle:
        type: string
      updated_at:
        type: string
      user_id:
        type: integer
      year:
        type: integer
    type: object
  entity.BookInput:
    properties:
      author:
        type: string
      tittle:
        type: string
      year:
        type: string
    type: object
  entity.Books:
    properties:
      UserID:
        type: integer
      author:
        type: string
      created_at:
        type: string
      id:
        type: integer
      tittle:
        type: string
      updated_at:
        type: string
      year:
        type: integer
    type: object
  entity.LoginInput:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  entity.UserInput:
    properties:
      address:
        type: string
      date_birth:
        type: string
      email:
        type: string
      name:
        type: string
      password:
        type: string
    type: object
  entity.UserOutput:
    properties:
      address:
        type: string
      date_birth:
        type: string
      email:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  entity.UserUpdateInput:
    properties:
      address:
        type: string
      date_birth:
        type: string
      name:
        type: string
    type: object
  helper.DeleteFormat:
    properties:
      data:
        type: string
    type: object
  helper.Response:
    properties:
      message:
        type: string
    type: object
  user.UserLoginOutput:
    properties:
      authorization:
        type: string
      date_birth:
        type: string
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      string:
        type: string
    type: object
info:
  contact: {}
paths:
  /books:
    get:
      consumes:
      - application/json
      description: Get All book
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/book.BookOutput'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/helper.Response'
      security:
      - Auth: []
      summary: get all book
      tags:
      - books
    post:
      description: Create new book
      parameters:
      - description: book data
        in: body
        name: book
        required: true
        schema:
          $ref: '#/definitions/entity.BookInput'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/book.BookOutputDetail'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helper.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/helper.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/helper.Response'
      security:
      - Auth: []
      summary: Create new book
      tags:
      - books
  /books/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a book by ID
      parameters:
      - description: book id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/helper.DeleteFormat'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helper.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/helper.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/helper.Response'
      security:
      - Auth: []
      summary: Delete book
      tags:
      - books
    get:
      consumes:
      - application/json
      description: Get a Book By ID
      parameters:
      - description: book id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Books'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helper.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/helper.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/helper.Response'
      security:
      - Auth: []
      summary: Get Book by ID
      tags:
      - books
    put:
      consumes:
      - application/json
      description: update book by id
      parameters:
      - description: book id
        in: path
        name: id
        required: true
        type: integer
      - description: update book
        in: body
        name: book
        required: true
        schema:
          $ref: '#/definitions/entity.BookInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Books'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helper.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/helper.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/helper.Response'
      security:
      - Auth: []
      summary: Update book
      tags:
      - books
  /users:
    get:
      consumes:
      - application/json
      description: Get all existing users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.UserOutput'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/helper.Response'
      security:
      - Auth: []
      summary: List existing users
      tags:
      - users
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a user by id
      parameters:
      - description: user ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/helper.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helper.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/helper.Response'
      security:
      - Auth: []
      summary: Delete user by id
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Get a user by user id
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.UserOutput'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helper.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/helper.Response'
      security:
      - Auth: []
      summary: Get user by ID
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update a user by ID
      parameters:
      - description: user ID
        in: path
        name: id
        required: true
        type: integer
      - description: update user
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/entity.UserUpdateInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.UserOutput'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helper.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/helper.Response'
      security:
      - Auth: []
      summary: Update user
      tags:
      - users
  /users/login:
    post:
      description: Authenticates a user and provide a JWT token
      operationId: Authentication
      parameters:
      - description: Login user
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/entity.LoginInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.UserLoginOutput'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/helper.Response'
      summary: Provides a JSON web Token
      tags:
      - users
  /users/register:
    post:
      consumes:
      - application/json
      description: Create a new users
      parameters:
      - description: create user
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/entity.UserInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.UserOutput'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helper.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/helper.Response'
      security:
      - Auth: []
      summary: Create new users
      tags:
      - users
securityDefinitions:
  Auth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
